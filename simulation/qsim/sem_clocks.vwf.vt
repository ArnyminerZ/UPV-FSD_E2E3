// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 19:28:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sem_clocks
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sem_clocks_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLK_ENA;
reg RSTn;
reg SEM_LOADn;
reg [5:0] SEM_P;
// wires                                               
wire [5:0] CUENTA;
wire TC;

// assign statements (if any)                          
sem_clocks i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLK_ENA(CLK_ENA),
	.CUENTA(CUENTA),
	.RSTn(RSTn),
	.SEM_LOADn(SEM_LOADn),
	.SEM_P(SEM_P),
	.TC(TC)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 2500;
	repeat(199)
	begin
		CLK = 1'b0;
		CLK = #2500 1'b1;
		# 2500;
	end
	CLK = 1'b0;
end 

// CLK_ENA
initial
begin
	CLK_ENA = 1'b1;
end 

// RSTn
initial
begin
	RSTn = 1'b1;
end 

// SEM_LOADn
initial
begin
	SEM_LOADn = 1'b1;
end 
endmodule

